/*
*  Copyright (c) 2019 Manuel Peuster <manuel@peuster.de
*  Copyright (c) 2019 SONATA-NFV, 5GTANGO, Paderborn University
* ALL RIGHTS RESERVED.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Neither the name of the SONATA-NFV, 5GTANGO, Paderborn University
* nor the names of its contributors may be used to endorse or promote
* products derived from this software without specific prior written
* permission.
*
* This work has also been performed in the framework of the 5GTANGO project,
* funded by the European Commission under Grant number 761493 through
* the Horizon 2020 and 5G-PPP programmes. The authors would like to
* acknowledge the contributions of their colleagues of the SONATA
* partner consortium (www.5gtango.eu).
*/
module ietf-ped-catalog
{
  namespace "urn:ietf:params:xml:ns:yang:ietf-ped-catalog";
  prefix "pe";
  organization "Paderborn University";
  contact "Manuel Peuster <manuel@peuster.de>";
  description "Performance Experiment Descriptor (PED) model";

  revision 2019-02-21 {
    description
      "Initial revision. This YANG file defines
       the Performance Experiment Descriptor (PED)";
    reference ""; 
  }

  typedef time-in-seconds {
         type uint64;
         units "seconds (s)";
         default 0;
         description "A time value.";
     }

  grouping vendor-name-version-id-ref {
    description "Reference (vendor.name.version triple) to another artefact/object.";
    leaf vendor-ref {
      type string;
      mandatory true;
      description "Vendor part of the reference";
    }
    leaf name-ref {
      type string;
      mandatory true;
      description "Name part of the reference";
    }
    leaf version-ref {
      type string;
      mandatory true;
      description "Version part of the reference";
    }
  }

  grouping generic-description {
    description "Generic description text";
    leaf description {
      type string;
      description "Generic description text";
    }
  }

  grouping sut-ref {
    description "Reference to a SUT";
    leaf id {
      type string;
        description "SUT identifier";
    }
    leaf uri {
      type string;
        description "Path/URL pointing to the SUT's location";
    }
    uses vendor-name-version-id-ref;
    uses generic-description;
  }

  grouping probe {
    description "Description of a probe";
    leaf id {
      type string;
      description "Probe identifier";
    }
    leaf container-image {
      type string;
      mandatory true;
      description "Name of the container image to be used for this probe";
    }
    leaf connection-point-ref {
      type string;
      description "Name of SUT connectin point to which this probe should be connected";
    }
    leaf address {
      type string;
      description "Static address the probe should get on its data iterface (CIDR)";
    }
  }

  grouping node-command-parameter {
    description "Set of parameters to configure node resources";
    leaf cmd-start {
      type string;
      description "Start command";
    }
    leaf cmd-stop {
      type string;
      description "Stop command";
    }
  }

  grouping node-resource-parameter {
    description "Set of parameters to configure node resources";
    // TODO enable experiment parameterizastion
    leaf cpu-bw {
      type string;
      description "CPU bandwidth limit";
    }
    leaf cpu-core-set {
      type string;
      description "CPU core set";
    }
    leaf mem-max {
      type string;
      description "Memory limit";
    }
    leaf mem-swap-max {
      type string;
      description "Memory swap limit";
    }
    leaf io-bw {
      type string;
      description "IO bandwidth limit";
    }
  }

  grouping experiment-node-parameter {
    description "Definition of experiment parameters for a node (probe or VNF of the SUT)";
    leaf id {
      type string;
      description "Identifier";
    }
    choice node-ref {
      case vnf {
        container vnf-ref {
          description "Reference to a VNF of the SUT.";
          uses vendor-name-version-id-ref;
        }
      }
      case probe {
          leaf probe-ref {
              type leafref {
                path "../../probes/id";
              }
              description "Reference to a probe ID.";
          }
      }
      mandatory true;
      description "Either reference a VNF (vendor.name.version) or a probe (leafref)";
    }
    // parameters to actually configure the node:
    uses node-command-parameter;
    uses node-resource-parameter;
  }

  grouping experiment {
    description "Definition of a single performance experiment";
    leaf id {
      type string;
      description "Experiment identifier";
    }
    leaf repetitions {
      type uint64;
      description "Number of repetiotions (also called trails)";
    }
    leaf time-limit {
      type time-in-seconds;
      description "Runtime of a single experiment in seconds";
    }
    list probes {
      key "id";
      description "Probes to be used in this experiment";
      uses probe;
    }
    list parameters {
      key "id";
      description "Parameters (e.g. configurations) tested during an experiment";
      uses experiment-node-parameter;
    }
  }

  grouping ped {
    description
      "Performance Experiment Descriptor (PED)";
    leaf id {
      type string;
      description "PED identifier";
    }
    leaf descriptor-version {
      type decimal64{
        fraction-digits 1;
      }
      default 1.0;
      description "Version of the data model";
    }
    leaf vendor {
      type string;
      mandatory true;
      description "PED vendor";
    }
    leaf name {
      type string;
      mandatory true;
      description "PED name";
    }
    leaf version {
      type string;
      mandatory true;
      description "PED version";
    }
    uses generic-description;
    leaf author {
      type string;
      description "Author of the described experiments";
    }
    list targets {
      key "id";
      min-elements 1;
      description "List of target SUTs against which the experiments are executed";  
      uses sut-ref;
    }
    list experiments {
      key "id";
      min-elements 1;
      description "";
      uses experiment;
    }
  }

  container ped-catalog {
    description
      "Performance Experiment Descriptor (PED)";
    list peds {
      key "id";
      description "List of PEDs";  
      uses ped;
    }
  }
}